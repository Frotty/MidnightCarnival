package Entity
import LinkedListModule
import Terrain
import PhysicsConstants
import Debug
import Fx

/** Base Entity Class  */
public abstract class Entity
	use LinkedListModule
	
	/** 3d vector position */
	protected vec3 pos
	/** 3d vector velocity */
	protected vec3 vel
	
	/** radius */
	real radius = 0.
	/** speed factor (multiplies to added velocity) */
	real speedFactor = 1.
	
	/** owning player */
	player owner
	
	/** flag for being static */
	boolean isStatic 	= false
	/** sleeping or active? */
	boolean active 		= true
	/** for removing */
	boolean done 		= false
	/** even if the Entites pos.z might be > 0, it still can be below terrainZ */
	boolean flying 		= false

	construct( vec3 pos, player owner )
		this.pos = pos
		this.vel = vec3(0,0,0)
		this.owner = owner
		entityCount++

	construct( vec3 pos, real radius, player owner )
		this.pos = pos
		this.vel = vec3(0,0,0)
		this.owner = owner
		this.radius = radius
		entityCount++
		
	construct( vec3 pos, vec3 vel, player owner )
		this.pos = pos
		this.vel = vel
		this.owner = owner
		entityCount++
		
	construct( vec3 pos, vec3 vel, real radius, player owner )
		this.pos = pos
		this.vel = vel
		this.owner = owner
		this.radius = radius
		entityCount++
		
	function getPos() returns vec3
		return pos
		
	function setPos( vec3 pos )
		this.pos = pos
		
	function addPos( vec3 pos )
		this.pos += pos
		
	function getVel() returns vec3
		return vel
		
	function setVel( vec3 vel )
		this.vel = vel
	
	function addVel( vec3 vel )
		this.vel += vel
		
	function setTarget( vec3 tpos, real speed )
		var t = distanceBetweenCoords(pos.x, pos.y, tpos.x, tpos.y) / speed
		let angle = angleBetweenCoordsR(pos.x, pos.y, tpos.x, tpos.y)
		let e = getTerrainZ(tpos.x,tpos.y)
		
		if t < 1.
			t = 1./speed
		
		let startZVelocity = ((-gravity.z * t) / 2 - pos.z/t + e/t)
		this.setVel( vec3( Cos(angle) * speed, Sin(angle) * speed, startZVelocity) )
		
	function terminate()
		done = true
		
	/** This function is called every ANIMATION_PERIOD tick if the Entity is active */
	abstract function update()
	
abstract public class UnitEntity extends Entity
	protected unit actor
	
	construct( vec3 pos, unit actor )
		super(pos, actor.getOwner())
		this.actor = actor
		actor.setUserData(this castTo int).addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
		unitEntityCount++
		
	construct( vec3 pos, real radius, unit actor )
		super(pos, radius, actor.getOwner())
		this.actor = actor
		actor.setUserData(this castTo int).addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
		unitEntityCount++
		
	override function update()
		pos = vec3(actor.getX(), actor.getY(), 0.)
		
	function setNewActor(unit u)
		actor.remove()
		actor = u
		actor.setUserData(this castTo int)
		
	override function setPos(vec3 tpos)
		pos = tpos
		actor.setPos(tpos.x,tpos.y)
		
	function setXY(vec3 tpos)
		pos = tpos
		actor.setXY(tpos.x,tpos.y)
		
abstract public class FxEntity extends Entity
	protected Fx fx
	
	construct( vec3 pos, real radius, player owner, real angle, string sfxpath )
		super(pos, radius, owner)
		fx = new Fx(pos, angle, sfxpath)
		
	construct( vec3 pos, real radius, player owner, real angle )
		super(pos, radius, owner)
		fx = new Fx(pos, angle)
	
	construct( vec3 pos, player owner, real angle )
		super(pos, 0., owner)
		fx = new Fx(pos, angle)
		
	override function update()
		pos += (vel*speedFactor)
		fx.setPos(pos)
		
	function setFx(string sfxpath)
		fx.setFx(sfxpath)
		
	override function setPos(vec3 tpos)
		pos = tpos
		fx.setPos(tpos.x,tpos.y)





	